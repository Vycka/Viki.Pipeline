<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <Authors>Vytautas Klumbys</Authors>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageProjectUrl>https://github.com/Vycka/Viki.Pipeline</PackageProjectUrl>
    <Version>0.1.4-preview</Version>
    <Company />
    <RepositoryUrl>https://github.com/Vycka/Viki.Pipeline</RepositoryUrl>
    <Product>Viki.Pipeline</Product>
    <Description>WiP
Collection of tools for moving large amounts of data within the app between threads through streams/enumerables.
IPipe&lt;T&gt; - in-memory transport layer.
 - Current implementation (BatchingPipe) always keeps something in the buffer unless its completed, thus if wanna keep pipe open for a while and flush things - no such feature yet.
*Producer/Consumer*StreamAdapter's helps work with IPipe as if it was a MemoryStream but with ability to read and write at the same time (performance will be better once i will cut away CombinedAsyncStream from Read Adapter.)
* Additionally there are extensions which expose Read/Write of pipes through enumerables.</Description>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="Streams\Components\**" />
    <EmbeddedResource Remove="Streams\Components\**" />
    <None Remove="Streams\Components\**" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
  </ItemGroup>

  <PropertyGroup>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <PackageReleaseNotes>MvP library version for first battle-tests.
for now nothings stable, anything can be refactored.</PackageReleaseNotes>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\..\LICENSE">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
  </ItemGroup>

</Project>
